openapi: 3.0.0
info:
  version: 1.0.0
  title: Example.com
  termsOfService: 'https://example.com/terms/'
  contact:
    email: contact@example.com
    url: 'http://example.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://raw.githubusercontent.com/jb-adams/assets/master/img/ga4gh-logo-padding.png'
  description: >
    This is an **example** API to demonstrate features of OpenAPI specification

    # Introduction

    This specification is intended to to be a good starting point for describing
    your API in

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).

    It also demonstrates features of
    [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
    tool and

    [ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few

    [vendor
    extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
overview:
  title: Overview
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - '$ref': 'frontmatter/preamble.yaml'
  - '$ref': 'frontmatter/biology.yaml'
  - '$ref': 'appendix/example_chapter.yaml'
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
x-tagGroups:
  - name: Front Matter
    tags:
      - Preamble
      - Biology
  - name: Operations
    tags:
      - Echo
      - User
  - name: Appendix
    tags:
      - Example Chapter
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  /echo:
    get:
      tags:
        - Echo
      summary: Get Echo test
      description: Get back the exact message you sent
      operationId: getEcho
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: string
                example: Hello World
        '302':
          description: redirect
        '500':
          description: error
          content:
            application/json:
              schema:
                type: string
                example: An Error Occurred
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
    put:
      tags:
        - Echo
      summary: Put Echo test
      description: Get back the exact message you sent
      operationId: putEcho
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: string
                example: Hello World
        '500':
          description: error
          content:
            application/json:
              schema:
                type: string
                example: An Error Occurred
    delete:
      tags:
        - Echo
      summary: Delete Echo test
      description: Delete the message you sent
      operationId: deleteEcho
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: string
                example: Hello World
        '500':
          description: error
          content:
            application/json:
              schema:
                type: string
                example: An Error Occurred
components:
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
      format: date-time
    Overview:
      description: >
        This is a file!
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
